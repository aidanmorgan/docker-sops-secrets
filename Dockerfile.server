# Multi-stage build for sops-secrets server binary
# Stage 1: Dependencies installation
FROM rust:bookworm as deps

# Build arguments
ARG RUST_VERSION=1.76
ARG RUST_TARGET=release

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    curl \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for building
RUN groupadd -r rustuser && useradd -r -g rustuser rustuser

# Set working directory
WORKDIR /app

# Copy Cargo files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Create dummy source files to build dependencies
RUN mkdir -p src/bin src/shared src/server src/client && \
    echo "pub mod shared;" > src/lib.rs && \
    echo "fn main() {}" > src/bin/server.rs && \
    echo "pub mod age;" > src/shared/mod.rs && \
    echo "pub struct AgeError;" > src/shared/age.rs && \
    echo "pub mod docker;" > src/server/mod.rs && \
    echo "pub struct DockerError;" > src/server/docker.rs && \
    echo "pub mod config;" > src/server/mod.rs && \
    echo "pub struct Config;" > src/server/config.rs && \
    echo "pub mod errors;" > src/server/errors.rs && \
    echo "pub struct Error;" > src/server/errors.rs && \
    echo "pub mod mod;" > src/client/mod.rs && \
    echo "fn main() {}" > src/bin/cli.rs && \
    echo "fn main() {}" > src/bin/exporter.rs

# Build dependencies only (this layer will be cached)
RUN cargo build --release --bin sops-secrets-server

# Stage 2: Build stage with actual source code
FROM deps as builder

# Remove dummy source files
RUN rm -rf src/

# Copy actual source code
COPY src/ ./src/

# Build the actual server binary
RUN cargo build --release --bin sops-secrets-server

# Stage 3: SOPS installation and validation
FROM debian:bookworm-slim AS sops-installer

# Build arguments
ARG SOPS_VERSION=v3.10.2
ARG ARCH=amd64

# Install dependencies for SOPS installation
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    ca-certificates \
    libssl-dev \
    libssl3 \
    coreutils \
    && rm -rf /var/lib/apt/lists/*

# Download and install SOPS with verification following official instructions
RUN set -eux; \
    # Download SOPS binary
    curl -LO https://github.com/getsops/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux.${ARCH}; \
    # Download checksums file
    curl -LO https://github.com/getsops/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.checksums.txt; \
    # Verify binary integrity using checksums file
    sha256sum -c sops-${SOPS_VERSION}.checksums.txt --ignore-missing; \
    # Install SOPS
    mv sops-${SOPS_VERSION}.linux.${ARCH} /usr/local/bin/sops; \
    chmod +x /usr/local/bin/sops; \
    # Verify installation
    sops --version

# Stage 4: Age installation and validation
FROM debian:bookworm-slim AS age-installer

# Build arguments
ARG AGE_VERSION=v1.2.1
ARG ARCH=amd64

# Install dependencies for age installation
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Download and install age
RUN curl -fsSL "https://github.com/FiloSottile/age/releases/download/${AGE_VERSION}/age-${AGE_VERSION}-linux-${ARCH}.tar.gz" -o /tmp/age.tar.gz && \
    tar -xzf /tmp/age.tar.gz -C /tmp && \
    mv /tmp/age/age /usr/local/bin/age && \
    chmod +x /usr/local/bin/age && \
    rm -rf /tmp/age /tmp/age.tar.gz && \
    age --version

# Stage 5: Runtime stage with minimal Debian image
FROM debian:bookworm-slim as runtime

# Build arguments
ARG SERVER_PORT=3000

# Install curl for health checks and create non-root user
RUN apt-get update && apt-get install -y curl ca-certificates && rm -rf /var/lib/apt/lists/* && \
    groupadd -r appuser && useradd -r -g appuser appuser

# Copy SOPS from installer stage
COPY --from=sops-installer /usr/local/bin/sops /usr/local/bin/sops

# Copy age from installer stage
COPY --from=age-installer /usr/local/bin/age /usr/local/bin/age

# Copy server binary from builder stage
COPY --from=builder /app/target/release/sops-secrets-server /usr/local/bin/sops-secrets-server

# Set working directory
WORKDIR /app

# Switch to non-root user
USER appuser

# Health check for the server binary
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["curl", "-f", "http://localhost:3000/health"]

# Default environment variables
ENV SOPS_SERVER_URL=http://localhost:${SERVER_PORT} \
    SECRETS_WORKING_DIR=/var/tmp/sops-secrets \
    MASTER_KEY_PATH=/run/secrets/master_key.age \
    SOPS_FILE_PATH=/run/secrets/secrets.yaml \
    SERVER_TIMEOUT_SECONDS=30 \
    SERVER_PORT=${SERVER_PORT}

# Expose server port (configurable via SERVER_PORT env var)
EXPOSE ${SERVER_PORT}

# Default command
CMD ["/usr/local/bin/sops-secrets-server"] 